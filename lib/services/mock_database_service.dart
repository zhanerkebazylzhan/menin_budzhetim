import 'package:flutter/foundation.dart' show debugPrint;
import '../models/category.dart';
import '../models/transaction.dart' as app_models;
import '../models/enums.dart';
import '../models/user_profile.dart';
import '../utils/constants.dart';

/// –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ (–±–µ–∑ SQLite)
class MockDatabaseService {
  static final MockDatabaseService _instance = MockDatabaseService._internal();
  factory MockDatabaseService() => _instance;
  MockDatabaseService._internal();

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
  final List<Category> _categories = [];
  final List<app_models.Transaction> _transactions = [];
  UserProfile? _userProfile;
  bool _initialized = false;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∏–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î)
  Future<void> _initialize() async {
    if (_initialized) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    _categories.addAll(DefaultCategories.all.map((category) => 
      category.copyWith(id: _categories.length + 1)
    ));
    
    _initialized = true;
    
    debugPrint('üì± –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    debugPrint('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${_categories.length}');
  }

  // ===== –†–ê–ë–û–¢–ê –° –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò =====

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Future<List<Category>> getCategories() async {
    await _initialize();
    return List.from(_categories);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
  Future<List<Category>> getCategoriesByType(TransactionType type) async {
    await _initialize();
    return _categories.where((cat) => cat.type == type).toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
  Future<Category?> getCategoryById(int id) async {
    await _initialize();
    try {
      return _categories.firstWhere((cat) => cat.id == id);
    } catch (e) {
      return null;
    }
  }

  // ===== –†–ê–ë–û–¢–ê –° –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò =====

  /// –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  Future<int> insertTransaction(app_models.Transaction transaction) async {
    await _initialize();
    
    final newId = _transactions.length + 1;
    final newTransaction = transaction.copyWith(id: newId);
    _transactions.add(newTransaction);
    
    debugPrint('üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${newTransaction.description} - ${newTransaction.formattedAmountWithSign}');
    debugPrint('üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${_transactions.length}');
    
    return newId;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  Future<List<app_models.Transaction>> getTransactions({
    int? limit,
    String? orderBy = 'date DESC',
  }) async {
    await _initialize();
    
    var result = List<app_models.Transaction>.from(_transactions);
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    result.sort((a, b) => b.date.compareTo(a.date));
    
    if (limit != null && limit > 0) {
      result = result.take(limit).toList();
    }
    
    return result;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É
  Future<List<app_models.Transaction>> getTransactionsByType(TransactionType type) async {
    await _initialize();
    return _transactions.where((t) => t.type == type).toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
  Future<List<app_models.Transaction>> getTransactionsByPeriod(
    DateTime startDate,
    DateTime endDate,
  ) async {
    await _initialize();
    return _transactions.where((t) => 
      t.date.isAfter(startDate) && t.date.isBefore(endDate)
    ).toList();
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  Future<int> updateTransaction(app_models.Transaction transaction) async {
    await _initialize();
    
    final index = _transactions.indexWhere((t) => t.id == transaction.id);
    if (index != -1) {
      _transactions[index] = transaction;
      return 1;
    }
    return 0;
  }

  /// –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
  Future<int> deleteTransaction(int id) async {
    await _initialize();
    
    final index = _transactions.indexWhere((t) => t.id == id);
    if (index != -1) {
      _transactions.removeAt(index);
      return 1;
    }
    return 0;
  }

  // ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

  /// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
  Future<double> getTotalBalance() async {
    await _initialize();
    
    double totalIncome = 0.0;
    double totalExpense = 0.0;
    
    for (final transaction in _transactions) {
      if (transaction.type == TransactionType.income) {
        totalIncome += transaction.amount;
      } else {
        totalExpense += transaction.amount;
      }
    }
    
    final balance = totalIncome - totalExpense;
    debugPrint('üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.toStringAsFixed(0)} ‚Ç∏ (–î–æ—Ö–æ–¥—ã: ${totalIncome.toStringAsFixed(0)} ‚Ç∏, –†–∞—Å—Ö–æ–¥—ã: ${totalExpense.toStringAsFixed(0)} ‚Ç∏)');
    
    return balance;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
  Future<Map<String, double>> getIncomeExpenseByPeriod(
    DateTime startDate,
    DateTime endDate,
  ) async {
    await _initialize();
    
    double income = 0.0;
    double expense = 0.0;
    
    for (final transaction in _transactions) {
      if (transaction.date.isAfter(startDate) && transaction.date.isBefore(endDate)) {
        if (transaction.type == TransactionType.income) {
          income += transaction.amount;
        } else {
          expense += transaction.amount;
        }
      }
    }
    
    return {
      'income': income,
      'expense': expense,
      'balance': income - expense,
    };
  }

  /// –ó–∞–∫—Ä—ã—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
  Future<void> close() async {
    // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
  }

  // ===== –†–ê–ë–û–¢–ê –° –ü–†–û–§–ò–õ–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserProfile?> getUserProfile() async {
    await _initialize();
    return _userProfile;
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> saveUserProfile(UserProfile profile) async {
    await _initialize();
    
    if (_userProfile != null) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      _userProfile = profile.copyWith(id: 1);
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      _userProfile = profile.copyWith(id: 1);
    }
    
    debugPrint('üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${_userProfile!.name} (${_userProfile!.email})');
    return 1;
  }

  /// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<int> deleteUserProfile() async {
    await _initialize();
    _userProfile = null;
    debugPrint('üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω');
    return 1;
  }

  // ===== –°–ë–†–û–° –î–ê–ù–ù–´–• =====

  /// –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> resetAllData() async {
    _transactions.clear();
    _userProfile = null;
    debugPrint('üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
  }

  // ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò =====

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  void printStats() {
    debugPrint('\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–†–ï–ú–ï–ù–ù–û–ô –ë–î ===');
    debugPrint('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${_categories.length}');
    debugPrint('üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${_transactions.length}');
    
    if (_transactions.isNotEmpty) {
      final income = _transactions.where((t) => t.type == TransactionType.income).length;
      final expense = _transactions.where((t) => t.type == TransactionType.expense).length;
      debugPrint('üìà –î–æ—Ö–æ–¥–æ–≤: $income');
      debugPrint('üìâ –†–∞—Å—Ö–æ–¥–æ–≤: $expense');
    }
    debugPrint('==================================\n');
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  Future<void> clearAll() async {
    _transactions.clear();
    debugPrint('üßπ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
  }
}