import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart' show debugPrint, kIsWeb;
import 'package:shared_preferences/shared_preferences.dart';

import '../models/currency_rate.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
class CurrencyService {
  static const String baseUrl = 'https://api.exchangerate-api.com/v4/latest';
  static const List<String> supportedCurrencies = ['USD', 'RUB', 'CNY', 'EUR', 'TRY'];
  static const String cacheKey = 'cached_currency_rates';
  static const String cacheTimeKey = 'cached_currency_rates_time';
  
  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∫ —Ç–µ–Ω–≥–µ
  static Future<List<CurrencyRate>> fetchAllRates() async {
    final rates = <CurrencyRate>[];
    
    try {
      // –î–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      for (final currency in supportedCurrencies) {
        final rate = await _fetchSingleRate(currency);
        if (rate != null) {
          rates.add(rate);
        }
      }
      
      debugPrint('üí± –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${rates.length}');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (rates.isNotEmpty) {
        await saveRatesToCache(rates);
      }
      
      return rates;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤: $e');
      
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
      final cachedRates = await loadRatesFromCache();
      if (cachedRates != null && cachedRates.isNotEmpty) {
        debugPrint('üì± –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫—É—Ä—Å—ã –∏–∑ –∫—ç—à–∞');
        return cachedRates;
      }
      
      throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç');
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –∫ —Ç–µ–Ω–≥–µ
  static Future<CurrencyRate?> _fetchSingleRate(String currencyCode) async {
    try {
      final url = Uri.parse('$baseUrl/$currencyCode');
      final response = await http.get(url).timeout(
        const Duration(seconds: 10),
        onTimeout: () {
          throw Exception('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞ $currencyCode');
        },
      );
      
      if (response.statusCode == 200) {
        final data = json.decode(response.body) as Map<String, dynamic>;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å KZT –≤ –æ—Ç–≤–µ—Ç–µ
        final rates = data['rates'] as Map<String, dynamic>?;
        if (rates != null && rates.containsKey('KZT')) {
          final rate = CurrencyRate.fromApiResponse(currencyCode, data);
          debugPrint('‚úÖ $currencyCode: ${rate.formattedRate} ‚Ç∏');
          return rate;
        } else {
          debugPrint('‚ö†Ô∏è –ù–µ—Ç –∫—É—Ä—Å–∞ KZT –¥–ª—è $currencyCode');
          return null;
        }
      } else {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ HTTP ${response.statusCode} –¥–ª—è $currencyCode');
        return null;
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞ $currencyCode: $e');
      return null;
    }
  }
  
  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å—ã –≤ SharedPreferences –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø–∞
  static Future<void> saveRatesToCache(List<CurrencyRate> rates) async {
    try {
      // SharedPreferences –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
      if (kIsWeb) {
        debugPrint('‚ö†Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏');
        return;
      }
      
      final prefs = await SharedPreferences.getInstance();
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      final ratesData = rates.map((rate) => {
        'code': rate.code,
        'rate': rate.rate,
        'flag': rate.flag,
        'name': rate.name,
        'updatedAt': rate.updatedAt.toIso8601String(),
      }).toList();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
      final jsonString = json.encode(ratesData);
      await prefs.setString(cacheKey, jsonString);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      await prefs.setString(cacheTimeKey, DateTime.now().toIso8601String());
      
      debugPrint('üíæ –ö—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: $e');
    }
  }
  
  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –∏–∑ –∫—ç—à–∞
  static Future<List<CurrencyRate>?> loadRatesFromCache() async {
    try {
      // SharedPreferences –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
      if (kIsWeb) {
        return null;
      }
      
      final prefs = await SharedPreferences.getInstance();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
      final jsonString = prefs.getString(cacheKey);
      if (jsonString == null) {
        return null;
      }
      
      // –ü–∞—Ä—Å–∏–º JSON
      final ratesData = json.decode(jsonString) as List<dynamic>;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã CurrencyRate
      final rates = ratesData.map((data) => CurrencyRate(
        code: data['code'] as String,
        rate: (data['rate'] as num).toDouble(),
        flag: data['flag'] as String,
        name: data['name'] as String,
        updatedAt: DateTime.parse(data['updatedAt'] as String),
      )).toList();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∫—ç—à–∞
      final cacheTimeString = prefs.getString(cacheTimeKey);
      if (cacheTimeString != null) {
        final cacheTime = DateTime.parse(cacheTimeString);
        final age = DateTime.now().difference(cacheTime);
        debugPrint('üì± –í–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞: ${age.inMinutes} –º–∏–Ω—É—Ç');
      }
      
      return rates;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞: $e');
      return null;
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞
  static Future<bool> isCacheValid() async {
    try {
      if (kIsWeb) {
        return false;
      }
      
      final prefs = await SharedPreferences.getInstance();
      final cacheTimeString = prefs.getString(cacheTimeKey);
      
      if (cacheTimeString == null) {
        return false;
      }
      
      final cacheTime = DateTime.parse(cacheTimeString);
      final age = DateTime.now().difference(cacheTime);
      
      // –°—á–∏—Ç–∞–µ–º –∫—ç—à –≤–∞–ª–∏–¥–Ω—ã–º –µ—Å–ª–∏ –µ–º—É –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤
      return age.inHours < 24;
    } catch (e) {
      return false;
    }
  }
  
  /// –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
  static Future<void> clearCache() async {
    try {
      if (kIsWeb) {
        return;
      }
      
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(cacheKey);
      await prefs.remove(cacheTimeKey);
      debugPrint('üßπ –ö—ç—à –∫—É—Ä—Å–æ–≤ –æ—á–∏—â–µ–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: $e');
    }
  }
}