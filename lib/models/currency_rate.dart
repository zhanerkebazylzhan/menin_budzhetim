/// –ú–æ–¥–µ–ª—å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
class CurrencyRate {
  final String code;      // USD, RUB, CNY, EUR, TRY
  final double rate;      // –ö—É—Ä—Å –∫ —Ç–µ–Ω–≥–µ
  final String flag;      // –§–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã (emoji)
  final String name;      // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
  final DateTime updatedAt;

  const CurrencyRate({
    required this.code,
    required this.rate,
    required this.flag,
    required this.name,
    required this.updatedAt,
  });

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ API –æ—Ç–≤–µ—Ç–∞
  factory CurrencyRate.fromApiResponse(String code, Map<String, dynamic> apiResponse) {
    final rates = apiResponse['rates'] as Map<String, dynamic>;
    final kztRate = rates['KZT'] as num;
    
    // –î–ª—è USD rate –±—É–¥–µ—Ç 509.67 (—Å–∫–æ–ª—å–∫–æ —Ç–µ–Ω–≥–µ –∑–∞ 1 –¥–æ–ª–ª–∞—Ä)
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å
    double rateToKzt;
    
    if (code == 'USD') {
      rateToKzt = kztRate.toDouble();
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ USD, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ USD
      final codeRate = rates[code] as num;
      rateToKzt = kztRate / codeRate;
    }
    
    return CurrencyRate(
      code: code,
      rate: rateToKzt,
      flag: _getFlag(code),
      name: _getName(code),
      updatedAt: DateTime.now(),
    );
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
  static String _getFlag(String code) {
    switch (code) {
      case 'USD':
        return 'üá∫üá∏';
      case 'RUB':
        return 'üá∑üá∫';
      case 'EUR':
        return 'üá™üá∫';
      case 'CNY':
        return 'üá®üá≥';
      case 'TRY':
        return 'üáπüá∑';
      default:
        return 'üè≥Ô∏è';
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
  static String _getName(String code) {
    switch (code) {
      case 'USD':
        return '–î–æ–ª–ª–∞—Ä –°–®–ê';
      case 'RUB':
        return '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å';
      case 'EUR':
        return '–ï–≤—Ä–æ';
      case 'CNY':
        return '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å';
      case 'TRY':
        return '–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞';
      default:
        return code;
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å
  String get formattedRate {
    return rate.toStringAsFixed(2);
  }

  @override
  String toString() {
    return '$flag $code: $formattedRate ‚Ç∏';
  }
}